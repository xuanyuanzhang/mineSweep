package MineSweep;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.Panel;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class Map extends JFrame implements Runnable {

	private Grid[] Grids = new Grid[82];
	public static int INIT_GAME_WIDTH = 370;
	public static int INIT_GAME_HEIGHT = 390;
	
	boolean isWin = true;
	
	private boolean isStart;
	private boolean isStop;
	
	private long startTime;
	private long stopTime;
	
	Label label;//label that shows bombLeft.
	private int bombLeft = 10;// # of remaining bombs.
	
	//Initialize the matrix 
	private void initGrid() {
		for(int i=1; i<Grids.length; i++) {
			Grids[i] = new Grid(Grids);
			Grids[i].setBackground(Color.gray);
			Grids[i].setNo(i);
		}
		
		for(int i=1; i<Grids.length; i++) {
			Grid northWest = Grids[i].getNearDimaond(1);
			Grid north = Grids[i].getNearDimaond(2);       
			Grid northEast = Grids[i].getNearDimaond(3);   
			Grid east = Grids[i].getNearDimaond(4);        
			Grid southEast = Grids[i].getNearDimaond(5);   
			Grid south = Grids[i].getNearDimaond(6);       
			Grid southWest = Grids[i].getNearDimaond(7);   
			Grid west = Grids[i].getNearDimaond(8);      
			
			Grids[i].setNorthWest(northWest);
			Grids[i].setNorth(north);
			Grids[i].setNorthEast(northEast);
			Grids[i].setEast(east);
			Grids[i].setSouthEast(southEast);
			Grids[i].setSouth(south);
			Grids[i].setSouthWest(southWest);
			Grids[i].setWest(west);
		}
		
		// Generate 10 random numbers in 81 without repeating.
		Random r = new Random();
		Set<Integer> bombNo = new HashSet<Integer>();
		for(int i=0; i<10; i++) {
			int temp = r.nextInt(81);
			while(temp == 0 || bombNo.contains(temp)) {
				temp = r.nextInt(81);
			}
			bombNo.add(temp);
		}
		
		Iterator<Integer> iterator = bombNo.iterator();
		while(iterator.hasNext()) {
			int bombIndex = (Integer) iterator.next();
			//System.out.println(bombIndex);
			Grids[bombIndex].setBomb(true);
		}
	}
	
	// Main frame
	public void launchFrame() {
		initGrid();
		this.setSize(INIT_GAME_WIDTH, INIT_GAME_HEIGHT);
		this.setAlwaysOnTop(true);
		this.setLayout(new BorderLayout());
		
		Panel mainPanel = new Panel();
		mainPanel.setLayout(new GridLayout(9, 9));
		Panel statePanel = new Panel();
		//statePanel.setSize(INIT_GAME_WIDTH, 20);
		
		label = new Label("10");// Initially with 10 mines
		label.setSize(INIT_GAME_WIDTH, 20);
		statePanel.add(label);
		
		for(int i=1; i<Grids.length; i++) {
			Grids[i].addMouseListener(new MyMouseListener(i));
			/*if(Grids[i].isBomb()) {
				Grids[i].setBackground(new Color(255, 0, 0));
			}*/
			mainPanel.add(Grids[i]);
		}
		
		
		this.add(mainPanel, BorderLayout.CENTER);
		this.add(statePanel, BorderLayout.SOUTH);
		
		
		
		
		this.addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
			
		});
		this.setVisible(true);
		
	}
	
	private int changedNum = 0;
	public class MyMouseListener implements MouseListener {
		
		private int index;
		private Color color = Color.gray;

		public MyMouseListener(int index) {
			this.index = index;
			//this.color = Grids[1].getBackground();
			//this.color = Grids[1].getForeground();
		}

		@Override
		public void mouseClicked(MouseEvent e) {
			//System.out.println("click");
			if(e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
				
				if(Grids[index].getNorthWest() != null) {
					Grids[index].getNorthWest().setBackground(this.color);
					if(Grids[index].getNorthWest().isBomb() && Grids[index].getNorthWest().getLabel().equals("m")) {
						changedNum++;
					}
				}
				if(Grids[index].getNorth() != null) {
					Grids[index].getNorth().setBackground(color);
					if(Grids[index].getNorth().isBomb() && Grids[index].getNorth().getLabel().equals("m")) {
						changedNum++;
					}
				}
				if(Grids[index].getNorthEast() != null) {
					Grids[index].getNorthEast().setBackground(color);
					if(Grids[index].getNorthEast().isBomb() && Grids[index].getNorthEast().getLabel().equals("m")) {
						changedNum++;
					}
				}
				if(Grids[index].getEast() != null) {
					Grids[index].getEast().setBackground(color);
					if(Grids[index].getEast().isBomb() && Grids[index].getEast().getLabel().equals("m")) {
						changedNum++;
					}
				}
				if(Grids[index].getSouthEast() != null) {
					Grids[index].getSouthEast().setBackground(color);
					if(Grids[index].getSouthEast().isBomb() && Grids[index].getSouthEast().getLabel().equals("m")) {
						changedNum++;
					}
				}
				if(Grids[index].getSouth() != null) {
					Grids[index].getSouth().setBackground(color);
					if(Grids[index].getSouth().isBomb() && Grids[index].getSouth().getLabel().equals("m")) {
						changedNum++;
					}
				}
				if(Grids[index].getSouthWest() != null) {
					Grids[index].getSouthWest().setBackground(color);
					if(Grids[index].getSouthWest().isBomb() && Grids[index].getSouthWest().getLabel().equals("m")) {
						changedNum++;
					}
				}
				if(Grids[index].getWest() != null) {
					Grids[index].getWest().setBackground(color);
					if(Grids[index].getWest().isBomb() && Grids[index].getWest().getLabel().equals("m")) {
						changedNum++;
					}
				}
				
				if(Grids[index].getNearBombNo() == changedNum) {// All mines have been found
					if(Grids[index].getNorthWest() != null && !Grids[index].getNorthWest().isChange() && !Grids[index].getNorthWest().isBomb()) {
						Grids[index].getNorthWest().change();
						if(Grids[index].getNorthWest().getNearBombNo() == 0) {
							Set<Grid> set = new HashSet<Grid>();
							Grids[index].getNorthWest().moveon(set);
						}
					}
					if(Grids[index].getNorth() != null && !Grids[index].getNorth().isChange() && !Grids[index].getNorth().isBomb()) {
						Grids[index].getNorth().change();
						if(Grids[index].getNorth().getNearBombNo() == 0) {
							Set<Grid> set = new HashSet<Grid>();
							Grids[index].getNorth().moveon(set);
						}	
					}
					if(Grids[index].getNorthEast() != null && !Grids[index].getNorthEast().isChange() && !Grids[index].getNorthEast().isBomb()) {
						Grids[index].getNorthEast().change();
						if(Grids[index].getNorthEast().getNearBombNo() == 0) {
							Set<Grid> set = new HashSet<Grid>();
							Grids[index].getNorthEast().moveon(set);
						}
					}
					if(Grids[index].getEast() != null && !Grids[index].getEast().isChange() && !Grids[index].getEast().isBomb()) {
						Grids[index].getEast().change();
						if(Grids[index].getEast().getNearBombNo() == 0) {
							Set<Grid> set = new HashSet<Grid>();
							Grids[index].getEast().moveon(set);
						}
					}
					if(Grids[index].getSouthEast() != null && !Grids[index].getSouthEast().isChange() && !Grids[index].getSouthEast().isBomb()) {
						Grids[index].getSouthEast().change();
						if(Grids[index].getSouthEast().getNearBombNo() == 0) {
							Set<Grid> set = new HashSet<Grid>();
							Grids[index].getSouthEast().moveon(set);
						}
					}
					if(Grids[index].getSouth() != null && !Grids[index].getSouth().isChange() && !Grids[index].getSouth().isBomb()) {
						Grids[index].getSouth().change();
						if(Grids[index].getSouth().getNearBombNo() == 0) {
							Set<Grid> set = new HashSet<Grid>();
							Grids[index].getSouth().moveon(set);
						}
					}
					if(Grids[index].getSouthWest() != null && !Grids[index].getSouthWest().isChange() && !Grids[index].getSouthWest().isBomb()) {
						Grids[index].getSouthWest().change();
						if(Grids[index].getSouthWest().getNearBombNo() == 0) {
							Set<Grid> set = new HashSet<Grid>();
							Grids[index].getSouthWest().moveon(set);
						}
					}
					if(Grids[index].getWest() != null && !Grids[index].getWest().isChange() && !Grids[index].getWest().isBomb()) {
						Grids[index].getWest().change();
						if(Grids[index].getWest().getNearBombNo() == 0) {
							Set<Grid> set = new HashSet<Grid>();
							Grids[index].getWest().moveon(set);
						}
					}
					
					
				}
				
				changedNum = 0;
				
				return;
			}
			
			if(e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 1) {
				// Breadth-first search to invert all empty squares.
				if(Grids[index].isBomb() == false && Grids[index].getNearBombNo() == 0) {
					Grids[index].change();
					Set<Grid> set = new HashSet<Grid>();
					Grids[index].moveon(set);
					return;
				}
				
				if(Grids[index].change()) {
					isWin = false;
					isStop = true;// Stop timer
					stopTime = System.currentTimeMillis();
					Grids[index].setBackground(Color.green);
					for(int i=1; i<Grids.length; i++) {
						if(Grids[i].isBomb() && !Grids[i].isChange()) {
							Grids[i].setBackground(Color.blue);
						}
					}
					JOptionPane.showMessageDialog(Map.this, "You hit a mine, the time takes is: " + (stopTime - startTime)/1000 + "s", "Warning!", JOptionPane.ERROR_MESSAGE, null);
					Map.this.dispose();
					new Map().launchFrame();
					return;
				}
			}
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			
		}

		
		@Override
		public void mousePressed(MouseEvent e) {
			
			if(e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
				if(Grids[index].getNorth() != null) Grids[index].getNorth().setBackground(Color.red);
				if(Grids[index].getNorthEast() != null) Grids[index].getNorthEast().setBackground(Color.red);
				if(Grids[index].getEast() != null) Grids[index].getEast().setBackground(Color.red);
				if(Grids[index].getSouthEast() != null) Grids[index].getSouthEast().setBackground(Color.red);
				if(Grids[index].getSouth() != null) Grids[index].getSouth().setBackground(Color.red);
				if(Grids[index].getSouthWest() != null) Grids[index].getSouthWest().setBackground(Color.red);
				if(Grids[index].getWest() != null) Grids[index].getWest().setBackground(Color.red);
				if(Grids[index].getNorthWest() != null) Grids[index].getNorthWest().setBackground(Color.red);
				return;
			}
			
			//System.out.println("press");
			/*if(e.getButton() == MouseEvent.BUTTON1) {
				isOnePress = true;
			}
			
			if(e.getButton() == MouseEvent.BUTTON3) {
				isTwoPress = true;
			}
			
			if(isOnePress && isTwoPress) {
				//System.out.println("left right");
				if(Grids[index].getNorthWest() != null) Grids[index].getNorthWest().setBackground(Color.black);
				if(Grids[index].getNorth() != null) Grids[index].getNorth().setBackground(Color.black);
				if(Grids[index].getNorthEast() != null) Grids[index].getNorthEast().setBackground(Color.black);
				if(Grids[index].getEast() != null) Grids[index].getEast().setBackground(Color.black);
				if(Grids[index].getSouthEast() != null) Grids[index].getSouthEast().setBackground(Color.black);
				if(Grids[index].getSouth() != null) Grids[index].getSouth().setBackground(Color.black);
				if(Grids[index].getSouthWest() != null) Grids[index].getSouthWest().setBackground(Color.black);
				if(Grids[index].getWest() != null) Grids[index].getWest().setBackground(Color.black);
			}*/
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			//System.out.println("release");
			/*if(isOnePress && isTwoPress) {
				if(Grids[index].getNorthWest() != null) Grids[index].getNorthWest().setBackground(this.color);
				if(Grids[index].getNorth() != null) Grids[index].getNorth().setBackground(color);
				if(Grids[index].getNorthEast() != null) Grids[index].getNorthEast().setBackground(color);
				if(Grids[index].getEast() != null) Grids[index].getEast().setBackground(color);
				if(Grids[index].getSouthEast() != null) Grids[index].getSouthEast().setBackground(color);
				if(Grids[index].getSouth() != null) Grids[index].getSouth().setBackground(color);
				if(Grids[index].getSouthWest() != null) Grids[index].getSouthWest().setBackground(color);
				if(Grids[index].getWest() != null) Grids[index].getWest().setBackground(color);
				isOnePress = false;
				isTwoPress = false;
				return;
			}*/
			
			if(isStart == false) {
				isStart = true;// Timer starts.
				startTime = System.currentTimeMillis();
				new Thread(Map.this).start();
			}
			
			if(e.isPopupTrigger()) {// right click to mark a mine, change to question mark, then make it blank.
				if(!Grids[index].isChange()) {// only if it has not be inverted, it can be inverted.
					//System.out.println("popup");
					Grid d = (Grid) e.getSource();
					//System.out.println(d.getLabel() + "---");JButton
					/*if(!d.getText().equals("m") && !d.getText().equals("?")) {
						d.setText("m");
					} else if(d.getText().equals("m")) {
						d.setText("?");
					} else {
						d.setText("");
					}*/
					
					d.requestFocus();
					if(!d.getLabel().equals("m") && !d.getLabel().equals("?")) {
						d.setLabel("m");
						bombLeft --;
					} else if(d.getLabel().equals("m")) {
						d.setLabel("?");
						bombLeft ++;
					} else {
						d.setLabel("");
						//bombLeft ++;
					}
					label.setText(bombLeft + "");
				}
				
				// Determine whether it is completed
				for(int i=1; i<Grids.length; i++) {
					/*if((Grids[i].isBomb() && !Grids[i].getText().equals("m")) 
							|| (!Grids[i].isBomb() && (Grids[i].getText().equals("m")) || Grids[i].getText().equals("?"))) {
						isWin = false;
						return;
					}*/
					if((Grids[i].isBomb() && !Grids[i].getLabel().equals("m")) 
							|| (!Grids[i].isBomb() && (Grids[i].getLabel().equals("m")) || Grids[i].getLabel().equals("?"))) {
						isWin = false;
						return;
					}
				}
				
				isWin = true;
				if(isWin) {
					isStop = true;// Timer stops when true
					stopTime = System.currentTimeMillis();
					for(int i=1; i<Grids.length; i++) {
						if(Grids[i].isBomb() == false && !Grids[i].isChange()) {
							Grids[i].change();
						}
					}
					// click yes to quit. 
					if(JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(Map.this, "You win, the time cost is: " + (stopTime - startTime)/1000 + "s", "Cong!", JOptionPane.OK_CANCEL_OPTION)) {
						Map.this.dispose();
						new Map().launchFrame();
					} else {
						System.exit(0);
					}
				}
			} 
			
			/*isOnePress = false;
			isTwoPress = false;*/
			
			/*if(e.getButton() == MouseEvent.BUTTON1) {
				//System.out.println("button1");//left button
				isOnePress = false;
			}
			
			
			if(e.getButton() == MouseEvent.BUTTON2) {
				System.out.println("button2");//right button
			}
			
			if(e.getButton() == MouseEvent.BUTTON3) {
				//System.out.println("button3");//right button
				isTwoPress = false;
			}*/
			
		}
		
	}
	

	@Override
	public void run() {
		
		int time = 0;
		
		while(isStart && !isStop) {
			//System.out.println(time);
			this.setTitle(time + "");
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			time ++;
		}
	}
	
	public static void main(String[] args) {
		new Map().launchFrame();
	}

}
